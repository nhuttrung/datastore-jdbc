package vn.khtt.datastore.jdbc;

import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;

import com.google.appengine.api.datastore.Transaction;

import com.google.appengine.api.datastore.TransactionOptions;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;

import java.util.Collections;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.parser.CCJSqlParserUtil;
import net.sf.jsqlparser.statement.select.Select;

public class DatastoreConnection implements Connection {
    public static final String DATASTORE_CONNECTION = "DATASTORE_CONNECTION";
    
    protected Connection calciteConnection;
    private Properties properties;
    
    private boolean autoCommit = true;
    private boolean readOnly;
    private boolean closed;
    
    protected DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
    protected Transaction transaction;
    
    protected CaseTransformer caseTransformer = new CaseTransformer.UpperCaseTransformer();
    
    public DatastoreConnection(Properties properties) {
    }
    public DatastoreConnection(Connection calciteConnection, Properties properties) {
        this.calciteConnection = calciteConnection;
        this.properties = properties;
    }

    @Override
    public Statement createStatement() throws SQLException {
        return new DatastoreStatement(this, calciteConnection.createStatement());
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency,
                                     int resultSetHoldability) throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        sql = caseTransformer.transformSql(sql);
        PreparedStatement calcitePreparedStatement = null;
        
        try{
            net.sf.jsqlparser.statement.Statement statement = CCJSqlParserUtil.parse(sql);
            if (statement instanceof Select){
                calcitePreparedStatement = calciteConnection.prepareStatement(sql);
            }
        } catch (SQLException e){
            e.printStackTrace();
            throw e;
        } catch (JSQLParserException e) {
            throw new SQLException(e);
        }
        return new DatastorePreparedStatement(this, sql, calcitePreparedStatement);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType,
                                              int resultSetConcurrency) throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
                                              int resultSetHoldability) throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
                                         int resultSetHoldability) throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public String nativeSQL(String sql) throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public void setAutoCommit(boolean autoCommit) throws SQLException {
        if (this.autoCommit == autoCommit){
            return;
        }
        
        // rollback previous transaction if any
        if (transaction != null) {
            transaction.rollback();
            transaction = null;
        }
        
        // start a new transaction
        if (!autoCommit){
            TransactionOptions options = TransactionOptions.Builder.withXG(true);
            transaction = datastore.beginTransaction(options);
        }
        this.autoCommit = autoCommit;
    }

    @Override
    public boolean getAutoCommit() throws SQLException {
        return autoCommit;
    }

    @Override
    public void commit() throws SQLException {
        // TODO
        if (transaction != null){
            transaction.commit();
            transaction = null;
        }
        
        // Also start a new transaction
        if (!autoCommit){
            TransactionOptions options = TransactionOptions.Builder.withXG(true);
            transaction = datastore.beginTransaction(options);
        }
    }

    @Override
    public void rollback() throws SQLException {
        // TODO
        if (transaction != null){
            transaction.rollback();
            transaction = null;
        }

        // Also start a new transaction
        if (!autoCommit){
            TransactionOptions options = TransactionOptions.Builder.withXG(true);
            transaction = datastore.beginTransaction(options);
        }
    }

    @Override
    public void rollback(Savepoint savepoint) throws SQLException {
        notImplemented();
    }

    @Override
    public void close() throws SQLException {
        if (transaction != null){
            transaction.rollback();
            transaction = null;
        }
        calciteConnection.close();
        closed = true;
    }

    @Override
    public boolean isClosed() throws SQLException {
        return closed;
    }

    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        return calciteConnection.getMetaData();
    }

    @Override
    public void setReadOnly(boolean readOnly) throws SQLException {
        this.readOnly = readOnly;
    }

    @Override
    public boolean isReadOnly() throws SQLException {
        return readOnly;
    }

    @Override
    public void setCatalog(String catalog) throws SQLException {
        notImplemented();

        // TODO Implement this method
    }

    @Override
    public String getCatalog() throws SQLException {
        return getProperties().getProperty("Catalog");
    }

    @Override
    public void setTransactionIsolation(int level) throws SQLException {
        notImplemented();

        // TODO Implement this method
    }

    @Override
    public int getTransactionIsolation() throws SQLException {
        notImplemented();

        // TODO Implement this method
        return 0;
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return null;    // TODO
    }

    @Override
    public void clearWarnings() throws SQLException {
        // TODO
    }

    @Override
    public Map<String, Class<?>> getTypeMap() throws SQLException {
        notImplemented();

        // TODO Implement this method
        return Collections.emptyMap();
    }

    @Override
    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
        notImplemented();

        // TODO Implement this method
    }

    @Override
    public void setHoldability(int holdability) throws SQLException {
        notImplemented();

        // TODO Implement this method
    }

    @Override
    public int getHoldability() throws SQLException {
        notImplemented();

        // TODO Implement this method
        return 0;
    }

    @Override
    public Savepoint setSavepoint() throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public Savepoint setSavepoint(String name) throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        notImplemented();

        // TODO Implement this method
    }

    @Override
    public Clob createClob() throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public Blob createBlob() throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public NClob createNClob() throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public SQLXML createSQLXML() throws SQLException {
        notImplemented();
        
        // TODO Implement this method
        return null;
    }

    @Override
    public boolean isValid(int timeout) throws SQLException {
        return true;
    }

    @Override
    public void setClientInfo(String name, String value) throws SQLClientInfoException {
        notImplemented();

        // TODO Implement this method

    }

    @Override
    public void setClientInfo(Properties properties) throws SQLClientInfoException {
        notImplemented();

        // TODO Implement this method
    }

    @Override
    public String getClientInfo(String name) throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public Properties getClientInfo() throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public void setSchema(String schema) throws SQLException {
        notImplemented();

        // TODO Implement this method
    }

    @Override
    public String getSchema() throws SQLException {
        notImplemented();

        // TODO Implement this method
        return null;
    }

    @Override
    public void abort(Executor executor) throws SQLException {
        notImplemented();

        // TODO Implement this method
    }

    @Override
    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
        notImplemented();

        // TODO Implement this method

    }

    @Override
    public int getNetworkTimeout() throws SQLException {
        notImplemented();

        // TODO Implement this method
        return 0;
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        try {
            if (isWrapperFor(iface)) {
                return (T) this;
            }
            throw new SQLException();
        } catch (Exception e) {
            throw new SQLException(e);
        }        
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return iface != null && iface.isAssignableFrom(getClass());
    }
    
    public Properties getProperties() {
        return properties;
    }

    public DatastoreService getDatastoreService() {
        return datastore;
    }

    private void notImplemented(){
        RuntimeException e = new UnsupportedOperationException("JdbcConnection: Not implemented");
        e.printStackTrace();
        throw e;
    }
}
